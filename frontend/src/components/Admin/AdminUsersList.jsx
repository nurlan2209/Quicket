import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import apiService from '../../services/api';

const AdminUsersList = () => {
  const { t } = useTranslation();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showRoleModal, setShowRoleModal] = useState(false);
  const [newRole, setNewRole] = useState('user');
  
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await apiService.getAllUsers();
        setUsers(response);
        setLoading(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        setError(t('admin.users.fetchError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'));
        setLoading(false);
      }
    };
    
    fetchUsers();
  }, [t]);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredUsers = users.filter(user =>
    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
    user.email.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUpdateRole = async () => {
    if (!selectedUser) return;
    
    setLoading(true);
    
    try {
      const response = await apiService.updateUserRole(selectedUser.id, newRole);
      
      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        setUsers(users.map(user => 
          user.id === selectedUser.id ? { ...user, role: newRole } : user
        ));
        
        setShowRoleModal(false);
        setSelectedUser(null);
        setError(null);
      } else {
        setError(response.message || t('admin.users.roleUpdateError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏'));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error);
      setError(t('admin.users.roleUpdateError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏'));
    } finally {
      setLoading(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleDeleteUser = async (userId) => {
    if (window.confirm(t('admin.users.confirmDelete', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'))) {
      setLoading(true);
      
      try {
        const response = await apiService.deleteUser(userId);
        
        if (response.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          setUsers(users.filter(user => user.id !== userId));
        } else {
          setError(response.message || t('admin.users.deleteError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        setError(t('admin.users.deleteError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
      } finally {
        setLoading(false);
      }
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };
  
  return (
    <div className="admin-users-container">
      {error && (
        <div className="admin-alert error">
          {error}
          <button 
            className="admin-alert-close"
            onClick={() => setError(null)}
          >
            √ó
          </button>
        </div>
      )}
      
      <div className="admin-filters">
        <div className="admin-filter-group full-width">
          <label htmlFor="search">{t('admin.users.search', '–ü–æ–∏—Å–∫')}</label>
          <input
            type="text"
            id="search"
            placeholder={t('admin.users.searchPlaceholder', '–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email...')}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>
      
      {loading ? (
        <div className="admin-loading">
          <div className="spinner"></div>
          <p>{t('common.loading', '–ó–∞–≥—Ä—É–∑–∫–∞...')}</p>
        </div>
      ) : (
        <div className="admin-table-responsive">
          {filteredUsers.length === 0 ? (
            <p className="admin-no-data">{t('admin.users.noUsers', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')}</p>
          ) : (
            <table className="admin-table">
              <thead>
                <tr>
                  <th>{t('admin.users.id', 'ID')}</th>
                  <th>{t('admin.users.username', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}</th>
                  <th>{t('admin.users.email', 'Email')}</th>
                  <th>{t('admin.users.role', '–†–æ–ª—å')}</th>
                  <th>{t('admin.users.createdAt', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}</th>
                  <th className="actions-column">{t('admin.users.actions', '–î–µ–π—Å—Ç–≤–∏—è')}</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map(user => (
                  <tr key={user.id}>
                    <td>{user.id}</td>
                    <td className="username-cell">{user.username}</td>
                    <td className="email-cell">{user.email}</td>
                    <td>
                      <span className={`user-role ${user.role}`}>
                        {user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      </span>
                    </td>
                    <td>{formatDate(user.created_at)}</td>
                    <td className="actions-cell">
                      <button 
                        className="admin-action-button edit"
                        onClick={() => {
                          setSelectedUser(user);
                          setNewRole(user.role);
                          setShowRoleModal(true);
                        }}
                        title={t('admin.users.changeRole', '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å')}
                      >
                        üëë
                      </button>
                      <button 
                        className="admin-action-button delete"
                        onClick={() => handleDeleteUser(user.id)}
                        title={t('admin.users.delete', '–£–¥–∞–ª–∏—Ç—å')}
                      >
                        üóëÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ */}
      {showRoleModal && selectedUser && (
        <div className="admin-modal">
          <div className="admin-modal-content admin-modal-small">
            <button 
              className="admin-modal-close"
              onClick={() => {
                setShowRoleModal(false);
                setSelectedUser(null);
              }}
            >
              √ó
            </button>
            <h3>{t('admin.users.changeRoleTitle', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}</h3>
            <p>{t('admin.users.changeRoleDescription', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}: <strong>{selectedUser.username}</strong></p>
            
            <div className="admin-form-group">
              <label htmlFor="role">{t('admin.users.newRole', '–ù–æ–≤–∞—è —Ä–æ–ª—å')}</label>
              <select
                id="role"
                value={newRole}
                onChange={(e) => setNewRole(e.target.value)}
              >
                <option value="user">{t('admin.users.roleUser', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</option>
                <option value="admin">{t('admin.users.roleAdmin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}</option>
              </select>
            </div>
            
            <div className="admin-modal-actions">
              <button 
                className="admin-button primary"
                onClick={handleUpdateRole}
                disabled={loading}
              >
                {loading ? t('common.loading', '–ó–∞–≥—Ä—É–∑–∫–∞...') : t('admin.users.saveRole', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')}
              </button>
              <button 
                className="admin-button secondary"
                onClick={() => {
                  setShowRoleModal(false);
                  setSelectedUser(null);
                }}
                disabled={loading}
              >
                {t('common.cancel', '–û—Ç–º–µ–Ω–∞')}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminUsersList;